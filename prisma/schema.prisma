generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  CategoryToFile CategoryToFile[]
}

model Comment {
  id      Int      @id @default(autoincrement())
  content String
  date    DateTime @default(now())
  userId  String
  fileId  Int
  File    File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model File {
  id             Int              @id @default(autoincrement())
  title          String
  author         String
  url            String?
  description    String?
  path           String
  type           FileType
  isDownloadable Boolean          @default(true)
  isAccessible   Boolean          @default(true)
  status         UploadStatus     @default(EN_ATTENTE)
  comment        String?
  uploadDate     DateTime         @default(now())
  deletedAt      DateTime?
  userId         String
  Comment        Comment[]
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Rating         Rating[]
  CategoryToFile CategoryToFile[]
  FileToTag      FileToTag[]
}

model Notification {
  id      String           @id
  message String
  type    NotificationType
  date    DateTime         @default(now())
  status  Boolean          @default(false)
  userId  String
  User    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id      Int      @id @default(autoincrement())
  note    Int      @default(1)
  comment String?
  date    DateTime @default(now())
  userId  String
  fileId  Int
  File    File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Request {
  id              String        @id
  title           String
  description     String?
  comment         String?
  informedByEmail Boolean
  status          RequestStatus @default(EN_ATTENTE)
  date            DateTime      @default(now())
  userId          String
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  FileToTag FileToTag[]
}

model User {
  id              String         @id
  regNumber       String         @unique
  surname         String
  firstname       String
  civility        Civility
  email           String         @unique
  phoneNumber     String?
  password        String
  role            Role
  isValid         Boolean        @default(false)
  inscriptionDate DateTime       @default(now())
  deletedAt       DateTime?
  Comment         Comment[]
  FAQ             FAQ[]
  File            File[]
  Notification    Notification[]
  Rating          Rating[]
  Request         Request[]
}

model CategoryToFile {
  A        Int
  B        Int
  Category Category @relation(fields: [A], references: [id], onDelete: Cascade)
  File     File     @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_CategoryToFile_AB_pkey")
  @@index([B], map: "_CategoryToFile_B_index")
  @@map("_CategoryToFile")
}

model FileToTag {
  A    Int
  B    Int
  File File @relation(fields: [A], references: [id], onDelete: Cascade)
  Tag  Tag  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_FileToTag_AB_pkey")
  @@index([B], map: "_FileToTag_B_index")
  @@map("_FileToTag")
}

enum AccountStatus {
  VALIDE
  NON_VALIDE
  GELE
}

enum Civility {
  Monsieur
  Madame
}

enum FileType {
  PDF
  EPUB
  MP3
  TXT
}

enum NotificationType {
  EMAIL
  PUSH
  NEWSLETTER
}

enum RequestStatus {
  EN_ATTENTE
  TRAITEE
  REJETEE
}

enum Role {
  ETUDIANT
  ENSEIGNANT
  BIBLIOTHECAIRE
  ADMINISTRATEUR
}

enum UploadStatus {
  EN_ATTENTE
  ACCEPTEE
  REJETEE
}
