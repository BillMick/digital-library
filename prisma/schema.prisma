// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ETUDIANT
  ENSEIGNANT
  BIBLIOTHECAIRE
  ADMINISTRATEUR
}

enum FileType {
  PDF
  EPUB
  MP3
  TXT
}

enum RequestStatus {
  EN_ATTENTE
  TRAITE
  REJETE
}

enum UploadStatus {
  EN_ATTENTE
  ACCEPTEE
  REJETEE
}

enum NotificationType {
  EMAIL
  PUSH
  NEWSLETTER
}

model User {
  id              String          @id @default(uuid())
  regNumber       String          @unique // registration number
  surname         String
  firstname       String
  email           String          @unique
  password        String
  role            Role
  inscriptionDate DateTime        @default(now())
  deletedAt       DateTime?
  files           File[]
  ratings         Rating[]
  requests        Request[]
  notifications   Notification[]
  comments        Comment[]
  faq             FAQ[]
}

model File {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  path            String
  type            FileType
  isDownloadable  Boolean       @default(true) // file exists, isReadable but is not downloadable
  isAccessible    Boolean       @default(true) // file exists but is neither readable nor downloadable for other users (students, teachers)
  status          UploadStatus  @default(EN_ATTENTE)
  comment         String?       
  uploadDate      DateTime      @default(now())
  deletedAt       DateTime?
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade) // should change ... Cascade <- SET NULL
  categories      Category[]
  tags            Tag[]
  ratings         Rating[]
  comments        Comment[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  files File[]
}

// model FileCategory {
//   fileId      String
//   categoryId  String
//   file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
//   category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   @@id([fileId, categoryId])
// }

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  files File[]
}

// model FileTag {
//   fileId  String
//   tagId   String
//   file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
//   tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
//   @@id([fileId, tagId])
// }

model Rating {
  id      Int       @id @default(autoincrement())
  note    Int       @default(1) //@db.Check("note BETWEEN 1 AND 5")
  comment String?
  date    DateTime  @default(now())
  userId  String
  fileId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  file    File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Comment {
  id      Int       @id @default(autoincrement())
  content String
  date    DateTime  @default(now())
  userId  String
  fileId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  file    File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Request {
  id          String        @id @default(uuid())
  title       String
  description String?
  status      RequestStatus @default(EN_ATTENTE)
  date        DateTime      @default(now())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String            @id @default(uuid())
  message String
  type    NotificationType
  date    DateTime          @default(now())
  status  Boolean           @default(false)
  userId  String
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FAQ {
  id        Int       @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}
